<?xml version="1.0" encoding="UTF-8"?>
<section version="5.0" 
  xml:base="../../" 
  xml:id="drools.ReleaseNotesDrools.6.4.0"
  xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd http://www.w3.org/1999/xlink http://www.docbook.org/xml/5.0/xsd/xlink.xsd" 
  xmlns="http://docbook.org/ns/docbook" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" 
  xmlns:xlink="http://www.w3.org/1999/xlink" 
  xmlns:xi="http://www.w3.org/2001/XInclude" 
  xmlns:ns="http://docbook.org/ns/docbook">

  <title>What is New and Noteworthy in Drools 6.4.0</title>

  <section>
    <title>Better Java 8 compatibility</title>

    <para>It is now possible to use Java 8 syntax (lambdas and method references) in the
    Right Hand Side (then) part of a rule.</para>
  </section>

  <section>
    <title>More robust incremental compilation</title>

    <para>The incremental compilation (dynamic rule-base update) had some relevant flaws
    when one or more rules with a subnetwork (rules with complex existential patterns)
    were involved, especially when the same subnetwork was shared among different rules.
    This issue required a partial rewriting of the existing incremental compilation algorithm,
    followed by a complete audit that has also been validated by brand new test suite
    made by more than 20,000 test cases only in this area.</para>
  </section>

  <section>
    <title>Improved multi-threading behaviour</title>

    <para>Engine's code dealing with multi-threading has been partially rewritten
    in order to remove a large number of synchronisation points and improve stability
    and predictability. In particular this new implementation allows a clearer separation
    and better interaction between the User thread (performing the insert/update/delete
    actions on the session), the Engine thread (doing the proper rules evaluation) and
    the Timer one (performing time-based actions like events expiration).</para>

    <para>This improvement has been made possible by the new phreak algorithm
    introduced with Drools 6. In fact with in the ReteOO algorithm the network evaluation
    is performed during the User insert/update/delete action, meaning that each user
    action locks the entire engine. Conversely with phreak the insert/update/delete
    is separated and the network evaluation happens when fireAllRules or fireUntilHalt
    is called.</para>

    <para>More in detail this improvement has been made by 2 parts. First of all a new
    thread-safe queue has been added to store all user actions as commands. This queue
    is populated by the User thread while its entries are flushed and processed by the
    Engine thread during the rules evaluations phase. The second part introduced a state
    machine coordinating the User, Timer and Engine threads and then providing a clearer
    and self-documenting way to model their interactions.</para>
  </section>

  <section>
    <title>OOPath improvements</title>

    <warning>
      <para>This feature is experimental</para>
    </warning>

    <para>OOPath has been introduced with Drools 6.3.0. In Drools 6.4.0 it has been enhanced
      to support the following features:
    </para>

    <itemizedlist>
      <listitem>
        <para>A constraint can also have a beckreference to an object of the graph traversed before the
          currently iterated one. For example the following OOPath:</para>

        <programlisting>Student( $grade: /plan/exams/grades{ result > ../averageResult } )</programlisting>

        <para>will match only the grades having a result above the average for the passed exam.</para>
      </listitem>

      <listitem>
        <para>A constraint can also recursively be another OOPath as it follows:</para>

        <programlisting>Student( $exam: /plan/exams{ /grades{ result > 20 } } )</programlisting>
      </listitem>

      <listitem>
        <para>It is also possible to use the <literal>?/</literal> separator instead of
          the <literal>/</literal> one. As in the following example:</para>

        <programlisting>Student( $grade: /plan/exams{ course == "Big Data" }?/grades )</programlisting>

        <para>By doing so the engine will react to a change made to an exam, or if an exam is added to the plan,
          but not if a new grade is added to an existing exam. Of course if a OOPath chunk is not reactive,
          all remaining part of the OOPath from there till the end of the expression will be non-reactive as well.
          For instance the following OOPath</para>

        <programlisting>Student( $grade: ?/plan/exams{ course == "Big Data" }/grades )</programlisting>

        <para>will be completely non-reactive. For this reason it is not allowed to use the
          <literal>?/</literal> separator more than once in the same OOPath so an expression like:</para>

        <programlisting>Student( $grade: /plan?/exams{ course == "Big Data" }?/grades )</programlisting>

        <para>will cause a compile time error.</para>
      </listitem>
    </itemizedlist>
  </section>
</section>



